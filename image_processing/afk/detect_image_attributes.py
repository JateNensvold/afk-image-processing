"""
Module that wraps the top level API for the AFK Arena Roster Screenshot and
Hero processing

Calling detect_features assumes that the image processing environment has been
initialized and will parse apart an image and feed it into the various models
needed to detect AFK Arena Hero Features
"""
import cv2
import numpy as np
from typing import List
import warnings

import image_processing.globals as GV
from image_processing.processing import get_heroes, SegmentResult
from image_processing.models.model_attributes import (
    ASCENSION_STAR_LABELS, BORDER_MODEL_LABELS, FI_LABELS, ModelResult,
    SI_LABELS)
from image_processing.afk.roster.matrix import Matrix
from image_processing.afk.hero.hero_data import (
    DetectedHeroData, HeroImage, RosterData)

# Silence Module loading warnings from pytofrch
warnings.filterwarnings("ignore")
FONT = cv2.FONT_HERSHEY_SIMPLEX
COLOR = (255, 255, 0)
THICKNESS = 2


def detect_features(roster_image: np.ndarray, debug_raw: bool = None):
    """
    Detect AFK Arena heroes from a roster screenshot and for each hero detect
        "FI", "SI", "Ascension", and "hero Name"
    Args:
        roster_image: image to run segmentation and detection on

        debug_raw: flag to add raw values for SI, FI and Ascension detection
            to return dictionary
    """

    if debug_raw is None:
        if GV.verbosity(1):
            debug_raw = True
        else:
            debug_raw = False

    lower_hsv = np.array([0, 0, 0])
    upper_hsv = np.array([179, 255, 192])

    hsv_range = [lower_hsv, upper_hsv]
    blur_args = {"hsv_range": hsv_range}
    # Run HSV segmentation on hero roster to get hero
    segment_dict, segment_matrix = get_heroes(roster_image, blur_args)

    detected_hero_data: list[DetectedHeroData] = []
    for _pseudo_segment_name, segment_info in segment_dict.items():
        hero_image_info, _template_image = GV.IMAGE_DB.search(
            segment_info.image)

        detected_hero_result = detect_attributes(hero_image_info, segment_info)
        detected_hero_data.append(detected_hero_result)

       # When debuggin Draw hero info on image
        if GV.verbosity(1):
            label_hero_feature(roster_image, segment_info,
                               detected_hero_result, segment_matrix)

    return RosterData(detected_hero_data, segment_matrix).json()


def label_hero_feature(roster_image: np.ndarray,
                       segment_info: SegmentResult,
                       detected_hero_result: DetectedHeroData,
                       hero_matrix: Matrix):
    """
    Write hero data such as FI/SI/Stars onto the roster image those attributes
        were derived from

    Args:
        roster_image (np.ndarray): roster of heroes
        segment_info (processing.SegmentResult): class with info describing the
            location of the detected_hero_results in the roster_image
        detected_hero_result (DetectedHeroData): data about a hero in the
            'roster_image' generated by 'detect_attributes'
        hero_matrix (matrix.matrix): matrix of hero data in the same horizontal
            and vertical order they were detected in
    """

    font_scale = 0.5 * (hero_matrix.get_avg_width()/100)

    result = str(detected_hero_result)

    hero_pixel_coordinate = (segment_info.segment_location.dimensions.x,
                             segment_info.segment_location.dimensions.y)
    text_size = cv2.getTextSize(result, FONT, font_scale, THICKNESS)
    height = text_size[0][1]
    bottom_left_coordinate = (hero_pixel_coordinate[0],
                              hero_pixel_coordinate[1] + round(5 * height))

    cv2.putText(roster_image, result, bottom_left_coordinate, FONT,
                abs(font_scale), COLOR, THICKNESS, cv2.LINE_AA)


def detect_attributes(hero_image_info: HeroImage, segment_info: SegmentResult):
    """
    Detect hero features such as FI, SI, Stars and ascension level using'
        custom trained yolov5 and detectron2 image recognition models

    Args:
        hero_image_info (HeroImage): info about the HeroImage that was detected
            from image database
        segment_info (processing.SegmentResult): class with info describing the
            location of the detected_hero_results in the roster_image
    Returns:
        [type]: [description]
    """

    test_img = segment_info.image[..., ::-1]
    # pylint: disable=not-callable
    raw_model_results = GV.FI_SI_STAR_MODEL(
        [test_img], size=416)

    labeled_model_results = raw_model_results.pandas().xyxy[0]
    detected_furniture = labeled_model_results.loc[
        labeled_model_results['class'].isin(FI_LABELS.keys())]

    detected_ascension_stars = labeled_model_results.loc[
        labeled_model_results['class'].isin(ASCENSION_STAR_LABELS.keys())]

    detected_signature_items = labeled_model_results.loc[
        labeled_model_results['class'].isin(SI_LABELS.keys())]

    furniture_result = ModelResult("0", 0)

    if len(detected_furniture) > 0:
        best_furniture_match = detected_furniture.sort_values(
            "confidence").iloc[0]
        best_furniture_label = FI_LABELS[best_furniture_match["class"]]

        if best_furniture_match["confidence"] >= 0.85:
            furniture_result = ModelResult(
                best_furniture_label, best_furniture_match["confidence"])

    ascension_result = ModelResult("E", 0)

    if len(detected_ascension_stars) > 0:
        best_ascension_stars_match = detected_ascension_stars.sort_values(
            "confidence", ascending=False).iloc[0]
        best_ascension_stars_label = ASCENSION_STAR_LABELS[
            best_ascension_stars_match["class"]]

        ascension_result = ModelResult(
            best_ascension_stars_label, best_ascension_stars_match["confidence"])

    signature_item_result = ModelResult("0", 0)

    if len(detected_signature_items) > 0:
        best_signature_item_match = detected_signature_items.sort_values(
            "confidence", ascending=False).iloc[0]
        best_signature_item_label = SI_LABELS[best_signature_item_match["class"]]

        if best_signature_item_match["confidence"] >= 0.85:
            signature_item_result = ModelResult(
                best_signature_item_label, best_signature_item_match["confidence"])

    engraving_result = ModelResult("0", 0)

    if ascension_result.score < 0.75:
        # pylint: disable=not-callable
        raw_detected_ascension_borders = GV.ASCENSION_BORDER_MODEL(
            test_img)
        detected_ascension_borders = raw_detected_ascension_borders["instances"]

        ascension_border_labels = detected_ascension_borders.pred_classes.cpu().tolist()
        ascension_border_scores = detected_ascension_borders.scores.cpu().tolist()

        ascension_border_results: List[ModelResult] = []

        for ascension_border_index, ascension_border_class_label in enumerate(ascension_border_labels):
            ascension_border_score = ascension_border_scores[ascension_border_index]
            ascension_border_result = ModelResult(BORDER_MODEL_LABELS[ascension_border_class_label],
                                                  ascension_border_score)
            ascension_border_results.append(ascension_border_result)

        ascension_border_results.sort(
            key=lambda model_result: model_result.score)

        if len(ascension_border_results) > 0:
            best_ascension_border = ascension_border_results[0]
            ascension_result = best_ascension_border
    else:
        # TODO detect engravings here
        pass

    hero_data = DetectedHeroData(hero_image_info.name, signature_item_result,
                                 furniture_result, ascension_result,
                                 engraving_result, segment_info.image)
    return hero_data


# if __name__ == "__main__":
#     start_time = time.time()
#     json_dict = get_si(GV.IMAGE_SS, detect_faction=False)
#     if GV.verbosity(1):
#         end_time = time.time()
    # print(f"Detected features in: {end_time - start_time}")
#         load.display_image(GV.IMAGE_SS, display=True)
#     if GV.VERBOSE_LEVEL == 0:
#         print(f"{{\"heroes\": {json_dict[GV.IMAGE_SS_NAME]['heroes']}}}")
#     else:
#         print("Heroes:")
#         print(f"Rows: {json_dict[GV.IMAGE_SS_NAME]['rows']}")
#         print(f"Columns: {json_dict[GV.IMAGE_SS_NAME]['columns']}")
#         indent_level = 0
#         hero_count = 0
#         for row_index, row in enumerate(json_dict[GV.IMAGE_SS_NAME]['heroes']):
#             tab_string = "\t" * indent_level
#             print(f"{tab_string}Row {row_index + 1}")
#             indent_level += 1
#             tab_string = "\t" * indent_level
#             for hero_index, hero_info in enumerate(row):
#                 print(f"{tab_string}Hero: {hero_count + 1} {tab_string} "
#                       f"{hero_info}")
#                 hero_count += 1
#             indent_level -= 1
