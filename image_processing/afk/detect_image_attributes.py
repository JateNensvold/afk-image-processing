"""
Module that wraps the top level API for the AFK Arena Roster Screenshot and
Hero processing

Calling detect_features assumes that the image processing environment has been
initialized and will parse apart an image and feed it into the various models
needed to detect AFK Arena Hero Features
"""
import traceback
from typing import TYPE_CHECKING

import cv2
from image_processing.utils.color_helper import MplColorHelper

import numpy as np
from pandas import DataFrame

import image_processing.globals as GV

from image_processing.load_images import display_image
from image_processing.afk.hero.process_heroes import (
    get_heroes, get_hero_contours)
from image_processing.processing.image_data import SegmentResult
from image_processing.models.model_attributes import (
    ASCENSION_STAR_LABELS, FI_LABELS, ModelResult, SI_LABELS)
from image_processing.afk.roster.matrix import Matrix
from image_processing.afk.hero.hero_data import (
    DetectedHeroData, HeroImage, RosterData)
from image_processing.afk.roster.dimensions_object import DoubleCoordinates
from image_processing.database.engravings_database import EngravingData

if TYPE_CHECKING:
    from image_processing.models.yolov5.models.common import Detections


FONT = cv2.FONT_HERSHEY_SIMPLEX
TEXT_COLOR = MplColorHelper().get_rgb("red")
THICKNESS = 2


def detect_features(roster_image: np.ndarray):
    """
    Detect AFK Arena heroes from a roster screenshot and for each hero detect
        "FI", "SI", "Ascension", and "hero Name"
    Args:
        roster_image: image to run segmentation and detection on
    """
    blur_args = {"hsv_range": GV.HERO_ROSTER_HSV}
    # Run HSV segmentation on hero roster to get hero
    GV.GLOBAL_TIMER.add_level("segment heroes")
    GV.GLOBAL_TIMER.start()

    segment_dict, segment_matrix = get_heroes(roster_image, blur_args)
    GV.GLOBAL_TIMER.finish_level()

    GV.GLOBAL_TIMER.add_level("detect hero info")
    GV.GLOBAL_TIMER.start()
    detected_hero_data: list[DetectedHeroData] = []
    for _pseudo_segment_name, segment_info in segment_dict.items():
        # display_image(segment_info.image, display=True)

        GV.GLOBAL_TIMER.add_level("hero lookup")
        GV.GLOBAL_TIMER.start()
        hero_matches = GV.IMAGE_DB.search(segment_info)
        GV.GLOBAL_TIMER.finish_level()

        best_hero_match = hero_matches.best()
        print(best_hero_match)
        best_match_info = GV.IMAGE_DB.hero_lookup[best_hero_match.name].first()
        GV.GLOBAL_TIMER.add_level("detect attributes")
        GV.GLOBAL_TIMER.start()
        detected_hero_result = detect_attributes(best_match_info, segment_info)
        GV.GLOBAL_TIMER.finish_level()
        detected_hero_data.append(detected_hero_result)

       # When debuggin Draw hero info on image
        if GV.verbosity(2):
            label_hero_feature(roster_image, segment_info,
                               detected_hero_result, segment_matrix)
    GV.GLOBAL_TIMER.finish_level()
    # End Global/main timer
    GV.GLOBAL_TIMER.finish_level()

    GV.GLOBAL_TIMER.display_breakdown()

    return RosterData(detected_hero_data, segment_matrix)


def label_hero_feature(roster_image: np.ndarray,
                       segment_info: SegmentResult,
                       detected_hero_result: DetectedHeroData,
                       hero_matrix: Matrix):
    """
    Write hero data such as FI/SI/Stars onto the roster image those attributes
        were derived from

    Args:
        roster_image (np.ndarray): roster of heroes
        segment_info (processing.SegmentResult): object with info describing the
            location of 'detected_hero_result' in DetectedHeroData
        detected_hero_result (DetectedHeroData): data about a hero in the
            'roster_image' generated by 'detect_attributes'
        hero_matrix (matrix.matrix): matrix of hero data in the same horizontal
            and vertical order they were detected in
    """

    font_scale = 0.5 * (hero_matrix.get_avg_width()/100)

    result = str(detected_hero_result)

    hero_pixel_coordinate = (segment_info.segment_location.dimensions.x,
                             segment_info.segment_location.dimensions.y)
    text_size = cv2.getTextSize(result, FONT, font_scale, THICKNESS)
    height = text_size[0][1]
    bottom_left_coordinate = (hero_pixel_coordinate[0],
                              hero_pixel_coordinate[1] + round(5 * height))

    cv2.putText(roster_image, result, bottom_left_coordinate, FONT,
                abs(font_scale), TEXT_COLOR, THICKNESS, cv2.LINE_AA)


def detect_furniture(detected_furnitures: DataFrame):
    """_summary_

    Args:
        detected_furniture (DataFrame): _description_

    Returns:
        _type_: _description_
    """

    furniture_result = ModelResult("0", 0)
    GV.GLOBAL_TIMER.add_level("detect furniture")
    GV.GLOBAL_TIMER.start()
    if len(detected_furnitures) > 0:
        best_furniture_match = detected_furnitures.sort_values(
            "confidence").iloc[0]
        best_furniture_label = FI_LABELS[best_furniture_match["class"]]

        if best_furniture_match["confidence"] >= 0.85:
            furniture_result = ModelResult(
                best_furniture_label, best_furniture_match["confidence"])
    GV.GLOBAL_TIMER.finish_level()
    return furniture_result


def detect_signature_item(detected_signature_items: DataFrame):
    """_summary_

    Args:
        detected_signature_items (DataFrame): _description_

    Returns:
        _type_: _description_
    """
    signature_item_result = ModelResult("0", 0)
    GV.GLOBAL_TIMER.add_level("detect signature item")
    GV.GLOBAL_TIMER.start()
    if len(detected_signature_items) > 0:
        best_signature_item_match = detected_signature_items.sort_values(
            "confidence", ascending=False).iloc[0]
        best_signature_item_label = (
            SI_LABELS[best_signature_item_match["class"]])

        if best_signature_item_match["confidence"] >= 0.85:
            signature_item_result = ModelResult(
                best_signature_item_label,
                best_signature_item_match["confidence"])
    GV.GLOBAL_TIMER.finish_level()
    return signature_item_result


def detect_ascension(detected_ascension_stars: DataFrame,
                     segment_info: SegmentResult):
    """_summary_

    Args:
        detected_ascension_stars (DataFrame): _description_
        segment_info (processing.SegmentResult): object with info describing the
            location of 'detected_hero_result' in DetectedHeroData
    Returns:
        _type_: _description_
    """
    ascension_result = ModelResult("E", 0)
    best_match_coordinates = None
    GV.GLOBAL_TIMER.add_level("detect ascension")
    GV.GLOBAL_TIMER.start()
    if len(detected_ascension_stars) > 0:
        best_ascension_stars_match = detected_ascension_stars.sort_values(
            "confidence", ascending=False).iloc[0]
        best_match_coordinates = DoubleCoordinates(
            best_ascension_stars_match["xmin"],
            best_ascension_stars_match["xmax"],
            best_ascension_stars_match["ymin"],
            best_ascension_stars_match["ymax"])

        best_ascension_stars_label = ASCENSION_STAR_LABELS[
            best_ascension_stars_match["class"]]

        ascension_result = ModelResult(
            best_ascension_stars_label,
            best_ascension_stars_match["confidence"])
    try:
        # If ascension score for ascended hero with stars is below 0.75
        #   confidence, detect border results for E - A ascension levels
        if ascension_result.score < 0.75:
            ascension_results = GV.ASCENSION_DB.search_image(
                segment_info.image, auto_label=True, manual_update=True)

            best_label = ascension_results.most_common(1)
            best_label_name = best_label[0]
            best_label_count = best_label[1]

            ascension_result = ModelResult(
                best_label_name,
                best_label_count / sum(ascension_results.values()))

            if GV.verbosity(1):
                print(f"Ascension Border Result: {ascension_result}")

            display_image(
                cv2.cvtColor(segment_info.image, cv2.COLOR_BGR2RGB), display=True)

    except Exception:
        traceback.print_exc()

    GV.GLOBAL_TIMER.finish_level()
    return ascension_result, best_match_coordinates


def detect_engraving(ascension_result: ModelResult,
                     image: np.ndarray,
                     star_coordinates: DoubleCoordinates):
    """_summary_

    Args:
        ascension_result (ModelResult): _description_
        image (np.ndarray): image in BGR format
        star_coordinates (DoubleCoordinates): _description_

    Returns:
        _type_: _description_
    """
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    engraving_result = ModelResult("0", 0)
    if ascension_result.label in ASCENSION_STAR_LABELS.inverse:  # pylint: disable=unsupported-membership-test
        temp_image = image[star_coordinates.y1:star_coordinates.y2,
                           star_coordinates.x1:star_coordinates.x2]
        contour_wrapper = get_hero_contours(
            temp_image, hsv_range=GV.ASCENSION_STAR_HSV)
        contour_list = contour_wrapper.filter_contours()

        # When no contours are return from filter_contours we can take the
        #   average color from the largets contour that was detected
        if len(contour_list) == 0:
            contour_list = contour_wrapper.largest()

        engraved_star_mask = np.zeros(temp_image.shape[:2], np.uint8)
        for contour_dimension_object in contour_list:
            cv2.drawContours(
                engraved_star_mask,
                [contour_dimension_object.raw_contour],
                -1, 255, -1)
        mean = cv2.mean(temp_image, mask=engraved_star_mask)
        engraving_results = GV.ENGRAVING_DB.search(
            EngravingData(mean[0], mean[1], mean[2]))
        if GV.verbosity(1):
            print(f"Engraving Result: {engraving_results}")
        engraving_result = engraving_results[0]
    return engraving_result


def detect_attributes(hero_image_info: HeroImage, segment_info: SegmentResult):
    """
    Detect hero features such as FI, SI, Stars and ascension level using'
        custom trained yolov5 and detectron2 image recognition models

    Args:
        hero_image_info (HeroImage): A wrapper around an image detected from
            the Flann image database that includes the image itself, the image
            name and the location the image was loaded from
        segment_info (processing.SegmentResult): object with info describing the
            location of 'detected_hero_result' in DetectedHeroData
    Returns:
        [type]: [description]
    """

    resized_image = cv2.resize(segment_info.image,
                               (GV.MODEL_IMAGE_SIZE, GV.MODEL_IMAGE_SIZE))
    rgb_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB)

    # pylint: disable=not-callable
    GV.GLOBAL_TIMER.add_level("raw_model_results")
    GV.GLOBAL_TIMER.start()
    raw_model_results: "Detections" = GV.FI_SI_STAR_MODEL(
        [rgb_image], size=GV.MODEL_IMAGE_SIZE)
    GV.GLOBAL_TIMER.finish_level()

    labeled_model_results: DataFrame = raw_model_results.pandas().xyxy[0]

    detected_furniture: DataFrame = labeled_model_results.loc[
        labeled_model_results['class'].isin(FI_LABELS.keys())]
    detected_ascension_stars: DataFrame = labeled_model_results.loc[
        labeled_model_results['class'].isin(ASCENSION_STAR_LABELS.keys())]
    detected_signature_items: DataFrame = labeled_model_results.loc[
        labeled_model_results['class'].isin(SI_LABELS.keys())]

    furniture_result = detect_furniture(detected_furniture)
    ascension_result, star_coordinates = detect_ascension(
        detected_ascension_stars, segment_info)
    signature_item_result = detect_signature_item(detected_signature_items)
    engraving_result = detect_engraving(
        ascension_result, segment_info.image, star_coordinates)

    hero_data = DetectedHeroData(hero_image_info.name, signature_item_result,
                                 furniture_result, ascension_result,
                                 engraving_result, segment_info.image)
    return hero_data
