// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.205.2/containers/docker-existing-docker-compose
// If you want to run as a non-root user in the container, see .devcontainer/docker-compose.yml.
{
	// Update the 'dockerComposeFile' list if you have more compose files or use different names.
	// The .devcontainer/docker-compose.yml file contains any overrides you need/want to make.
	"name": "AFK Image Processing Dev Container",
	"dockerComposeFile": [
		"docker-compose.yml"
	],
	"service": "afk_processing_container",
	"workspaceFolder": "/workspace",
	// Use this environment variable if you need to bind mount your local source code into a new container.
	"remoteEnv": {
		"LOCAL_WORKSPACE_FOLDER": "${localWorkspaceFolder}",
		// Used to forward X11 traffic to X11 host running in WSL outside container
		"DISPLAY": "${localEnv:DISPLAY}"
	},
	// The 'service' property is the name of the service for the container that VS Code should
	// use. Update this value and .devcontainer/docker-compose.yml to the real service name.
	// The optional 'workspaceFolder' property is the path VS Code should open by default when
	// connected. This is typically a file mount in .devcontainer/docker-compose.yml
	// Set *default* container specific settings.json values on container create.
	"settings": {
		"python.defaultInterpreterPath": "/usr/local/bin/python",
		"python.linting.enabled": true,
		"python.linting.pylintEnabled": true,
		"python.formatting.autopep8Path": "/usr/local/py-utils/bin/autopep8",
		"python.formatting.blackPath": "/usr/local/py-utils/bin/black",
		"python.formatting.yapfPath": "/usr/local/py-utils/bin/yapf",
		"python.linting.banditPath": "/usr/local/py-utils/bin/bandit",
		"python.linting.flake8Path": "/usr/local/py-utils/bin/flake8",
		"python.linting.mypyPath": "/usr/local/py-utils/bin/mypy",
		"python.linting.pycodestylePath": "/usr/local/py-utils/bin/pycodestyle",
		"python.linting.pydocstylePath": "/usr/local/py-utils/bin/pydocstyle",
		"python.linting.pylintPath": "/usr/local/py-utils/bin/pylint",
		"python.linting.pylintArgs": [
			// generates functions stubs for packages like cv2
			"--generate-members",
			"--extension-pkg-whitelist=cv2",
			"--rcfile",
			"${workspaceFolder}/afk_image_processing/.pylintrc"],
		"editor.rulers": [
			80
		],
		"cSpell.words": [
			"imwrite",
			"isin",
			"INET",
			"devcontainer"
		],
		"todo-tree.filtering.excludeGlobs": [
			"**/"
		]
	},
	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"ms-python.python", // Adds vscode support for python
		"ms-python.vscode-pylance", // Adds linter for python
		"streetsidesoftware.code-spell-checker", // adds spell checker to all code and other documents
		"ms-azuretools.vscode-docker", // Integrates docker support into vscode, allowing containers to be built/rebuilt
		"njpwerner.autodocstring", // Automatically creates docstrings for python functions
		"Gruntfuggly.todo-tree" //Lists todo's in project
	],
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],
	// Uncomment the next line if you want start specific services in your Docker Compose config.
	// "runServices": [],
	// Uncomment the next line if you want to keep your containers running after VS Code shuts down.
	// "shutdownAction": "none",
	// Uncomment the next line to run commands after the container is created - for example installing curl.
	// "postCreateCommand": "apt-get update && apt-get install -y curl",
	// Uncomment to connect as a non-root user if you've added one. See https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "vscode",
	"features": {
		"docker-in-docker": "latest",
		"docker-from-docker": "latest",
		"git": "os-provided"
	},
	// Install albedo-bot and afk_image_processing as python development packages
	"postStartCommand": "cd /workspace/albedo-bot && pip3 install -r requirements.txt  && /workspace/afk_image_processing/requirements/install -s"
}